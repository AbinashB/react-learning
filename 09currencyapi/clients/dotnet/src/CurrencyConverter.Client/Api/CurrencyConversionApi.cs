// <auto-generated>
/*
 * Currency Converter API
 *
 * A simple REST API built with Kotlin and Spring Boot that provides currency conversion rates.  ## Features - Get conversion rates for a specific base currency - Returns rates in the format: `{currencycode: {inr: 1, cny: 2, etc}}` - Support for major currencies (USD, EUR, GBP, INR, JPY, CNY, CAD, AUD, CHF, SGD, KRW) - Health check endpoint - List supported currencies  ## Note This API uses mock exchange rates for demonstration purposes. In a production environment, you would integrate with a real currency exchange rate API like Fixer.io, CurrencyLayer, or similar services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CurrencyConverter.Client.CurrencyConverter.Client;
using CurrencyConverter.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace CurrencyConverter.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICurrencyConversionApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CurrencyConversionApiEvents Events { get; }

        /// <summary>
        /// Get currency conversion rates
        /// </summary>
        /// <remarks>
        /// Retrieves conversion rates for a specific base currency. Returns exchange rates from the base currency to all other supported currencies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The base currency code (case-insensitive)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCurrencyRatesApiResponse"/>&gt;</returns>
        Task<IGetCurrencyRatesApiResponse> GetCurrencyRatesAsync(string currencyCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get currency conversion rates
        /// </summary>
        /// <remarks>
        /// Retrieves conversion rates for a specific base currency. Returns exchange rates from the base currency to all other supported currencies.
        /// </remarks>
        /// <param name="currencyCode">The base currency code (case-insensitive)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCurrencyRatesApiResponse"/>?&gt;</returns>
        Task<IGetCurrencyRatesApiResponse?> GetCurrencyRatesOrDefaultAsync(string currencyCode, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetCurrencyRatesApiResponse"/>
    /// </summary>
    public interface IGetCurrencyRatesApiResponse : CurrencyConverter.Client.CurrencyConverter.Client.IApiResponse, IOk<Dictionary<string, Dictionary<string, double>>?>, IBadRequest<CurrencyConverter.Client.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CurrencyConversionApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCurrencyRates;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCurrencyRates;

        internal void ExecuteOnGetCurrencyRates(CurrencyConversionApi.GetCurrencyRatesApiResponse apiResponse)
        {
            OnGetCurrencyRates?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCurrencyRates(Exception exception)
        {
            OnErrorGetCurrencyRates?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CurrencyConversionApi : ICurrencyConversionApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CurrencyConversionApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CurrencyConversionApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyConversionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrencyConversionApi(ILogger<CurrencyConversionApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CurrencyConversionApiEvents currencyConversionApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CurrencyConversionApi>();
            HttpClient = httpClient;
            Events = currencyConversionApiEvents;
        }

        partial void FormatGetCurrencyRates(ref string currencyCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="currencyCode"></param>
        /// <returns></returns>
        private void ValidateGetCurrencyRates(string currencyCode)
        {
            if (currencyCode == null)
                throw new ArgumentNullException(nameof(currencyCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="currencyCode"></param>
        private void AfterGetCurrencyRatesDefaultImplementation(IGetCurrencyRatesApiResponse apiResponseLocalVar, string currencyCode)
        {
            bool suppressDefaultLog = false;
            AfterGetCurrencyRates(ref suppressDefaultLog, apiResponseLocalVar, currencyCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="currencyCode"></param>
        partial void AfterGetCurrencyRates(ref bool suppressDefaultLog, IGetCurrencyRatesApiResponse apiResponseLocalVar, string currencyCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="currencyCode"></param>
        private void OnErrorGetCurrencyRatesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string currencyCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCurrencyRates(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, currencyCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="currencyCode"></param>
        partial void OnErrorGetCurrencyRates(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string currencyCode);

        /// <summary>
        /// Get currency conversion rates Retrieves conversion rates for a specific base currency. Returns exchange rates from the base currency to all other supported currencies.
        /// </summary>
        /// <param name="currencyCode">The base currency code (case-insensitive)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCurrencyRatesApiResponse"/>&gt;</returns>
        public async Task<IGetCurrencyRatesApiResponse?> GetCurrencyRatesOrDefaultAsync(string currencyCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCurrencyRatesAsync(currencyCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get currency conversion rates Retrieves conversion rates for a specific base currency. Returns exchange rates from the base currency to all other supported currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The base currency code (case-insensitive)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCurrencyRatesApiResponse"/>&gt;</returns>
        public async Task<IGetCurrencyRatesApiResponse> GetCurrencyRatesAsync(string currencyCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCurrencyRates(currencyCode);

                FormatGetCurrencyRates(ref currencyCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/{currencyCode}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/{currencyCode}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcurrencyCode%7D", Uri.EscapeDataString(currencyCode.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCurrencyRatesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCurrencyRatesApiResponse>();

                        GetCurrencyRatesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/{currencyCode}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCurrencyRatesDefaultImplementation(apiResponseLocalVar, currencyCode);

                        Events.ExecuteOnGetCurrencyRates(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCurrencyRatesDefaultImplementation(e, "/api/{currencyCode}", uriBuilderLocalVar.Path, currencyCode);
                Events.ExecuteOnErrorGetCurrencyRates(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCurrencyRatesApiResponse"/>
        /// </summary>
        public partial class GetCurrencyRatesApiResponse : CurrencyConverter.Client.CurrencyConverter.Client.ApiResponse, IGetCurrencyRatesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCurrencyRatesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCurrencyRatesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCurrencyRatesApiResponse(ILogger<GetCurrencyRatesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Dictionary<string, Dictionary<string, double>>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, double>>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Dictionary<string, Dictionary<string, double>>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public CurrencyConverter.Client.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<CurrencyConverter.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out CurrencyConverter.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
