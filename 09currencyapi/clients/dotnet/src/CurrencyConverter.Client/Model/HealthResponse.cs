// <auto-generated>
/*
 * Currency Converter API
 *
 * A simple REST API built with Kotlin and Spring Boot that provides currency conversion rates.  ## Features - Get conversion rates for a specific base currency - Returns rates in the format: `{currencycode: {inr: 1, cny: 2, etc}}` - Support for major currencies (USD, EUR, GBP, INR, JPY, CNY, CAD, AUD, CHF, SGD, KRW) - Health check endpoint - List supported currencies  ## Note This API uses mock exchange rates for demonstration purposes. In a production environment, you would integrate with a real currency exchange rate API like Fixer.io, CurrencyLayer, or similar services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CurrencyConverter.Client.CurrencyConverter.Client;

namespace CurrencyConverter.Client.Model
{
    /// <summary>
    /// HealthResponse
    /// </summary>
    public partial class HealthResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthResponse" /> class.
        /// </summary>
        /// <param name="status">Health status of the service</param>
        /// <param name="service">Name of the service</param>
        [JsonConstructor]
        public HealthResponse(StatusEnum status, string service)
        {
            Status = status;
            Service = service;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Health status of the service
        /// </summary>
        /// <value>Health status of the service</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UP for value: UP
            /// </summary>
            UP = 1,

            /// <summary>
            /// Enum DOWN for value: DOWN
            /// </summary>
            DOWN = 2
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("UP"))
                return StatusEnum.UP;

            if (value.Equals("DOWN"))
                return StatusEnum.DOWN;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("UP"))
                return StatusEnum.UP;

            if (value.Equals("DOWN"))
                return StatusEnum.DOWN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.UP)
                return "UP";

            if (value == StatusEnum.DOWN)
                return "DOWN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Health status of the service
        /// </summary>
        /// <value>Health status of the service</value>
        /* <example>UP</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Name of the service
        /// </summary>
        /// <value>Name of the service</value>
        /* <example>Currency Converter API</example> */
        [JsonPropertyName("service")]
        public string Service { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HealthResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HealthResponse" />
    /// </summary>
    public class HealthResponseJsonConverter : JsonConverter<HealthResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="HealthResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HealthResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<HealthResponse.StatusEnum?> status = default;
            Option<string?> service = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<HealthResponse.StatusEnum?>(HealthResponse.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "service":
                            service = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class HealthResponse.", nameof(status));

            if (!service.IsSet)
                throw new ArgumentException("Property is required for class HealthResponse.", nameof(service));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class HealthResponse.");

            if (service.IsSet && service.Value == null)
                throw new ArgumentNullException(nameof(service), "Property is not nullable for class HealthResponse.");

            return new HealthResponse(status.Value!.Value!, service.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="HealthResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="healthResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HealthResponse healthResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, healthResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HealthResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="healthResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HealthResponse healthResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (healthResponse.Service == null)
                throw new ArgumentNullException(nameof(healthResponse.Service), "Property is required for class HealthResponse.");

            var statusRawValue = HealthResponse.StatusEnumToJsonValue(healthResponse.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteString("service", healthResponse.Service);
        }
    }
}
