// <auto-generated>
/*
 * Currency Converter API
 *
 * A simple REST API built with Kotlin and Spring Boot that provides currency conversion rates.  ## Features - Get conversion rates for a specific base currency - Returns rates in the format: `{currencycode: {inr: 1, cny: 2, etc}}` - Support for major currencies (USD, EUR, GBP, INR, JPY, CNY, CAD, AUD, CHF, SGD, KRW) - Health check endpoint - List supported currencies  ## Note This API uses mock exchange rates for demonstration purposes. In a production environment, you would integrate with a real currency exchange rate API like Fixer.io, CurrencyLayer, or similar services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CurrencyConverter.Client.CurrencyConverter.Client;

namespace CurrencyConverter.Client.Model
{
    /// <summary>
    /// ErrorResponse
    /// </summary>
    public partial class ErrorResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        /// <param name="error">Error type</param>
        /// <param name="message">Detailed error message</param>
        /// <param name="supportedCurrencies">List of supported currency codes (present in currency-related errors)</param>
        [JsonConstructor]
        public ErrorResponse(string error, string message, Option<List<string>?> supportedCurrencies = default)
        {
            Error = error;
            Message = message;
            SupportedCurrenciesOption = supportedCurrencies;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Error type
        /// </summary>
        /// <value>Error type</value>
        /* <example>Currency not supported</example> */
        [JsonPropertyName("error")]
        public string Error { get; set; }

        /// <summary>
        /// Detailed error message
        /// </summary>
        /// <value>Detailed error message</value>
        /* <example>The currency code &#39;xyz&#39; is not supported</example> */
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Used to track the state of SupportedCurrencies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> SupportedCurrenciesOption { get; private set; }

        /// <summary>
        /// List of supported currency codes (present in currency-related errors)
        /// </summary>
        /// <value>List of supported currency codes (present in currency-related errors)</value>
        /* <example>[&quot;usd&quot;,&quot;eur&quot;,&quot;gbp&quot;,&quot;inr&quot;,&quot;jpy&quot;,&quot;cny&quot;,&quot;cad&quot;,&quot;aud&quot;,&quot;chf&quot;,&quot;sgd&quot;,&quot;krw&quot;]</example> */
        [JsonPropertyName("supportedCurrencies")]
        public List<string>? SupportedCurrencies { get { return this.SupportedCurrenciesOption; } set { this.SupportedCurrenciesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SupportedCurrencies: ").Append(SupportedCurrencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrorResponse" />
    /// </summary>
    public class ErrorResponseJsonConverter : JsonConverter<ErrorResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrorResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> error = default;
            Option<string?> message = default;
            Option<List<string>?> supportedCurrencies = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "error":
                            error = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "supportedCurrencies":
                            supportedCurrencies = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!error.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(error));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(message));

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class ErrorResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ErrorResponse.");

            if (supportedCurrencies.IsSet && supportedCurrencies.Value == null)
                throw new ArgumentNullException(nameof(supportedCurrencies), "Property is not nullable for class ErrorResponse.");

            return new ErrorResponse(error.Value!, message.Value!, supportedCurrencies);
        }

        /// <summary>
        /// Serializes a <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrorResponse errorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errorResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrorResponse errorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errorResponse.Error == null)
                throw new ArgumentNullException(nameof(errorResponse.Error), "Property is required for class ErrorResponse.");

            if (errorResponse.Message == null)
                throw new ArgumentNullException(nameof(errorResponse.Message), "Property is required for class ErrorResponse.");

            if (errorResponse.SupportedCurrenciesOption.IsSet && errorResponse.SupportedCurrencies == null)
                throw new ArgumentNullException(nameof(errorResponse.SupportedCurrencies), "Property is required for class ErrorResponse.");

            writer.WriteString("error", errorResponse.Error);

            writer.WriteString("message", errorResponse.Message);

            if (errorResponse.SupportedCurrenciesOption.IsSet)
            {
                writer.WritePropertyName("supportedCurrencies");
                JsonSerializer.Serialize(writer, errorResponse.SupportedCurrencies, jsonSerializerOptions);
            }
        }
    }
}
