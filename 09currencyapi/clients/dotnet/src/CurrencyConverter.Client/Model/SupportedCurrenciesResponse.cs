// <auto-generated>
/*
 * Currency Converter API
 *
 * A simple REST API built with Kotlin and Spring Boot that provides currency conversion rates.  ## Features - Get conversion rates for a specific base currency - Returns rates in the format: `{currencycode: {inr: 1, cny: 2, etc}}` - Support for major currencies (USD, EUR, GBP, INR, JPY, CNY, CAD, AUD, CHF, SGD, KRW) - Health check endpoint - List supported currencies  ## Note This API uses mock exchange rates for demonstration purposes. In a production environment, you would integrate with a real currency exchange rate API like Fixer.io, CurrencyLayer, or similar services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using CurrencyConverter.Client.CurrencyConverter.Client;

namespace CurrencyConverter.Client.Model
{
    /// <summary>
    /// SupportedCurrenciesResponse
    /// </summary>
    public partial class SupportedCurrenciesResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedCurrenciesResponse" /> class.
        /// </summary>
        /// <param name="supportedCurrencies">List of supported currency codes in lowercase</param>
        /// <param name="count">Total number of supported currencies</param>
        [JsonConstructor]
        public SupportedCurrenciesResponse(List<string> supportedCurrencies, int count)
        {
            SupportedCurrencies = supportedCurrencies;
            Count = count;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// List of supported currency codes in lowercase
        /// </summary>
        /// <value>List of supported currency codes in lowercase</value>
        /* <example>[&quot;usd&quot;,&quot;eur&quot;,&quot;gbp&quot;,&quot;inr&quot;,&quot;jpy&quot;,&quot;cny&quot;,&quot;cad&quot;,&quot;aud&quot;,&quot;chf&quot;,&quot;sgd&quot;,&quot;krw&quot;]</example> */
        [JsonPropertyName("supportedCurrencies")]
        public List<string> SupportedCurrencies { get; set; }

        /// <summary>
        /// Total number of supported currencies
        /// </summary>
        /// <value>Total number of supported currencies</value>
        /* <example>11</example> */
        [JsonPropertyName("count")]
        public int Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupportedCurrenciesResponse {\n");
            sb.Append("  SupportedCurrencies: ").Append(SupportedCurrencies).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SupportedCurrenciesResponse" />
    /// </summary>
    public class SupportedCurrenciesResponseJsonConverter : JsonConverter<SupportedCurrenciesResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SupportedCurrenciesResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SupportedCurrenciesResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> supportedCurrencies = default;
            Option<int?> count = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "supportedCurrencies":
                            supportedCurrencies = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "count":
                            count = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!supportedCurrencies.IsSet)
                throw new ArgumentException("Property is required for class SupportedCurrenciesResponse.", nameof(supportedCurrencies));

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class SupportedCurrenciesResponse.", nameof(count));

            if (supportedCurrencies.IsSet && supportedCurrencies.Value == null)
                throw new ArgumentNullException(nameof(supportedCurrencies), "Property is not nullable for class SupportedCurrenciesResponse.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class SupportedCurrenciesResponse.");

            return new SupportedCurrenciesResponse(supportedCurrencies.Value!, count.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SupportedCurrenciesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supportedCurrenciesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SupportedCurrenciesResponse supportedCurrenciesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, supportedCurrenciesResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SupportedCurrenciesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supportedCurrenciesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SupportedCurrenciesResponse supportedCurrenciesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (supportedCurrenciesResponse.SupportedCurrencies == null)
                throw new ArgumentNullException(nameof(supportedCurrenciesResponse.SupportedCurrencies), "Property is required for class SupportedCurrenciesResponse.");

            writer.WritePropertyName("supportedCurrencies");
            JsonSerializer.Serialize(writer, supportedCurrenciesResponse.SupportedCurrencies, jsonSerializerOptions);
            writer.WriteNumber("count", supportedCurrenciesResponse.Count);
        }
    }
}
