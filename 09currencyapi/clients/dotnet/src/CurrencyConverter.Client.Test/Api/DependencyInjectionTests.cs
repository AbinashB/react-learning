/*
 * Currency Converter API
 *
 * A simple REST API built with Kotlin and Spring Boot that provides currency conversion rates.  ## Features - Get conversion rates for a specific base currency - Returns rates in the format: `{currencycode: {inr: 1, cny: 2, etc}}` - Support for major currencies (USD, EUR, GBP, INR, JPY, CNY, CAD, AUD, CHF, SGD, KRW) - Health check endpoint - List supported currencies  ## Note This API uses mock exchange rates for demonstration purposes. In a production environment, you would integrate with a real currency exchange rate API like Fixer.io, CurrencyLayer, or similar services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using CurrencyConverter.Client.CurrencyConverter.Client;
using CurrencyConverter.Client.Api;
using CurrencyConverter.Client.Extensions;
using Xunit;

namespace CurrencyConverter.Client.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var currencyConversionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICurrencyConversionApi>();
            Assert.True(currencyConversionApi.HttpClient.BaseAddress != null);

            var currencyInformationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICurrencyInformationApi>();
            Assert.True(currencyInformationApi.HttpClient.BaseAddress != null);

            var healthCheckApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IHealthCheckApi>();
            Assert.True(healthCheckApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var currencyConversionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICurrencyConversionApi>();
            Assert.True(currencyConversionApi.HttpClient.BaseAddress != null);

            var currencyInformationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICurrencyInformationApi>();
            Assert.True(currencyInformationApi.HttpClient.BaseAddress != null);

            var healthCheckApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IHealthCheckApi>();
            Assert.True(healthCheckApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var currencyConversionApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICurrencyConversionApi>();
            Assert.True(currencyConversionApi.HttpClient.BaseAddress != null);
            
            var currencyInformationApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICurrencyInformationApi>();
            Assert.True(currencyInformationApi.HttpClient.BaseAddress != null);
            
            var healthCheckApi = _hostUsingAddWithAClient.Services.GetRequiredService<IHealthCheckApi>();
            Assert.True(healthCheckApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var currencyConversionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICurrencyConversionApi>();
            Assert.True(currencyConversionApi.HttpClient.BaseAddress != null);

            var currencyInformationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICurrencyInformationApi>();
            Assert.True(currencyInformationApi.HttpClient.BaseAddress != null);

            var healthCheckApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IHealthCheckApi>();
            Assert.True(healthCheckApi.HttpClient.BaseAddress != null);
        }
    }
}
