/*
 * Currency Converter API
 *
 * A simple REST API built with Kotlin and Spring Boot that provides currency conversion rates.  ## Features - Get conversion rates for a specific base currency - Returns rates in the format: `{currencycode: {inr: 1, cny: 2, etc}}` - Support for major currencies (USD, EUR, GBP, INR, JPY, CNY, CAD, AUD, CHF, SGD, KRW) - Health check endpoint - List supported currencies  ## Note This API uses mock exchange rates for demonstration purposes. In a production environment, you would integrate with a real currency exchange rate API like Fixer.io, CurrencyLayer, or similar services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using CurrencyConverter.Client.Api;
using CurrencyConverter.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace CurrencyConverter.Client.Test.Api
{
    /// <summary>
    ///  Class for testing CurrencyConversionApi
    /// </summary>
    public sealed class CurrencyConversionApiTests : ApiTestsBase
    {
        private readonly ICurrencyConversionApi _instance;

        public CurrencyConversionApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ICurrencyConversionApi>();
        }

        /// <summary>
        /// Test GetCurrencyRates
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCurrencyRatesAsyncTest()
        {
            string currencyCode = default!;
            var response = await _instance.GetCurrencyRatesAsync(currencyCode);
            var model = response.Ok();
            Assert.IsType<Dictionary<string, Dictionary<string, double>>>(model);
        }
    }
}
