/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.currency.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.example.currency.client.models.HealthResponse

import com.squareup.moshi.Json

import com.example.currency.client.infrastructure.ApiClient
import com.example.currency.client.infrastructure.ApiResponse
import com.example.currency.client.infrastructure.ClientException
import com.example.currency.client.infrastructure.ClientError
import com.example.currency.client.infrastructure.ServerException
import com.example.currency.client.infrastructure.ServerError
import com.example.currency.client.infrastructure.MultiValueMap
import com.example.currency.client.infrastructure.PartConfig
import com.example.currency.client.infrastructure.RequestConfig
import com.example.currency.client.infrastructure.RequestMethod
import com.example.currency.client.infrastructure.ResponseType
import com.example.currency.client.infrastructure.Success
import com.example.currency.client.infrastructure.toMultiValue

class HealthCheckApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080")
        }
    }

    /**
     * GET /api/health
     * Health check endpoint
     * Returns the health status of the API service
     * @return HealthResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun healthCheck() : HealthResponse {
        val localVarResponse = healthCheckWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as HealthResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/health
     * Health check endpoint
     * Returns the health status of the API service
     * @return ApiResponse<HealthResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun healthCheckWithHttpInfo() : ApiResponse<HealthResponse?> {
        val localVariableConfig = healthCheckRequestConfig()

        return request<Unit, HealthResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation healthCheck
     *
     * @return RequestConfig
     */
    fun healthCheckRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/health",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
